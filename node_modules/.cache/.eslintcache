[{"E:\\DATN\\datn_WebQuanTri\\src\\index.js":"1","E:\\DATN\\datn_WebQuanTri\\src\\App.js":"2","E:\\DATN\\datn_WebQuanTri\\src\\reportWebVitals.js":"3","E:\\DATN\\datn_WebQuanTri\\src\\component\\Navigation\\Nav.js":"4","E:\\DATN\\datn_WebQuanTri\\src\\component\\Login\\Login.js":"5","E:\\DATN\\datn_WebQuanTri\\src\\component\\Register\\Register.js":"6","E:\\DATN\\datn_WebQuanTri\\src\\services\\userServices.js":"7","E:\\DATN\\datn_WebQuanTri\\src\\component\\ManageUsers\\Users.js":"8","E:\\DATN\\datn_WebQuanTri\\src\\routes\\AppRoutes.js":"9","E:\\DATN\\datn_WebQuanTri\\src\\routes\\PrivateRoutes.js":"10","E:\\DATN\\datn_WebQuanTri\\src\\component\\ManageUsers\\ModelUser.js":"11"},{"size":540,"mtime":1693998117037,"results":"12","hashOfConfig":"13"},{"size":1052,"mtime":1695533480281,"results":"14","hashOfConfig":"13"},{"size":375,"mtime":1693991347806,"results":"15","hashOfConfig":"13"},{"size":869,"mtime":1699886721146,"results":"16","hashOfConfig":"13"},{"size":4638,"mtime":1695917587635,"results":"17","hashOfConfig":"13"},{"size":8009,"mtime":1694182964132,"results":"18","hashOfConfig":"13"},{"size":987,"mtime":1700583425413,"results":"19","hashOfConfig":"13"},{"size":6150,"mtime":1700585638213,"results":"20","hashOfConfig":"13"},{"size":1271,"mtime":1699888012131,"results":"21","hashOfConfig":"13"},{"size":565,"mtime":1695917512866,"results":"22","hashOfConfig":"13"},{"size":6055,"mtime":1700585484319,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1o4ii9i",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"26"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},"E:\\DATN\\datn_WebQuanTri\\src\\index.js",[],["54","55"],"E:\\DATN\\datn_WebQuanTri\\src\\App.js",["56"],"import './App.scss';\r\nimport Nav from './component/Navigation/Nav';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {BrowserRouter as Router,} from \"react-router-dom\";\r\nimport AppRoutes from './routes/AppRoutes';\r\n\r\nfunction App() {\r\n  const [account, setaccount] = useState({});\r\n\r\n  useEffect(() => {\r\n    let session = sessionStorage.getItem(\"account\");\r\n    if (session) {\r\n      setaccount(JSON.parse(session));\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <Router>\r\n      <div className='app-header'>\r\n        <Nav />\r\n      </div>\r\n\r\n      <div className='app-container'>\r\n       <AppRoutes/>\r\n      </div>\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        theme=\"light\"\r\n      />\r\n\r\n\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","E:\\DATN\\datn_WebQuanTri\\src\\reportWebVitals.js",[],"E:\\DATN\\datn_WebQuanTri\\src\\component\\Navigation\\Nav.js",["57","58","59"],"import React, { useEffect, useState } from 'react';\r\nimport './Nav.scss';\r\nimport { NavLink, useLocation } from 'react-router-dom';\r\nconst Nav = (props) => {\r\n    const [isShow, setIsShow] = useState(true)\r\n    let location = useLocation();\r\n    useEffect(() => {\r\n        if (location.pathname == '/login') {\r\n            setIsShow(false)\r\n        }\r\n    },[])\r\n\r\n\r\n    return (\r\n        <>\r\n       {isShow == true &&  \r\n            <div className=\"topnav\"> \r\n            <NavLink  to='/' exact>HOME</NavLink>\r\n            <NavLink to='/users'>Users</NavLink>\r\n            <NavLink  to='/products'>Products</NavLink>\r\n            <NavLink  to='/category'>Category</NavLink>\r\n            <NavLink  to='/member'>Member</NavLink>\r\n            <NavLink  to='/news'>News</NavLink>\r\n        </div>\r\n       } \r\n       \r\n        </>\r\n        \r\n    );\r\n}\r\n\r\nexport default Nav;","E:\\DATN\\datn_WebQuanTri\\src\\component\\Login\\Login.js",["60","61","62","63"],"import { useEffect, useState } from 'react';\r\nimport './Login.scss';\r\nimport { toast } from 'react-toastify';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { LoginUser } from '../../services/userServices';\r\nconst Login = (props) => {\r\n    let history = useHistory();\r\n\r\n    const [ValueLogin, setValueLogin] = useState(\"\");\r\n    const [password, setpassword] = useState(\"\");\r\n\r\n    const defaultObjvalueInput = {\r\n        isvalidValueLogin: true,\r\n        isvalidVluePassword: true,\r\n\r\n    }\r\n    const [objValueInput, setObjvalueInput] = useState(defaultObjvalueInput)\r\n\r\n\r\n    const handleCreateNewAccount = () => {\r\n        history.push('/register');\r\n    }\r\n    const handleLogin = async() => {\r\n        setObjvalueInput(defaultObjvalueInput);\r\n\r\n        if(!ValueLogin){\r\n            setObjvalueInput({...defaultObjvalueInput, isvalidValueLogin: false});\r\n            toast.error(\"Please enter your email or phone number\")\r\n            return;\r\n        }\r\n        if(!password){\r\n            setObjvalueInput({...defaultObjvalueInput, isvalidVluePassword: false});\r\n            toast.error(\"Please enter your password\")\r\n            return;\r\n        }\r\n    let respone =  await LoginUser(ValueLogin,password);\r\n    if(respone && respone.data && +respone.data.EC === 0){\r\n        // success\r\n        let data = {\r\n            isAuthenticated: true,\r\n            token: 'fake token'\r\n        }\r\n        sessionStorage.setItem(\"account\", JSON.stringify(data));\r\n        history.push('/users')\r\n        window.location.reload();\r\n    }\r\n    if(respone && respone.data && +respone.data.EC !== 0){\r\n        // error\r\n        toast.error(respone.data.EM)\r\n    }\r\n      \r\n    }\r\n    const handlePressEnter = (event) => {\r\n     if(event.charCode == 13 && event.code == \"Enter\"){\r\n        handleLogin();\r\n     }\r\n    }\r\n\r\n    useEffect(() => {\r\n        let session = sessionStorage.getItem(\"account\");\r\n        if (session) {\r\n            history.push(\"/\")\r\n            window.location.reload();\r\n        }\r\n    },[])\r\n    return (\r\n        <div className=\"login-container\">\r\n            <div className=\"container\">\r\n                <div className=\"row px-3 px-sm-0\">\r\n                    <div className=\"content-left col-12 d-none col-sm-7 d-sm-block \">\r\n                        <div className='brand'>\r\n                            Thế Nguyện\r\n                        </div>\r\n                        <div className='detail'>\r\n                            Người Đẹp Trai Nhất Thế Giới Chỉ Có Một Trên Đời Thôi Nhé Anh Em Ơi.............\r\n                        </div>\r\n                    </div>\r\n                    \r\n                        <div className=\"content-right col-sm-5 col-12 d-flex flex-column gap-3 py-3\">\r\n                        <div className='brand d-sm-none'>\r\n                            Thế Nguyện\r\n                        </div>\r\n                            <input type='text'\r\n                             className= {objValueInput.isvalidValueLogin ? 'form-control' : 'is-invalid form-control'}\r\n                             placeholder='Email address or phone number' \r\n                            value={ValueLogin}\r\n                            onChange={(event) => {setValueLogin(event.target.value)}}\r\n                            />\r\n                            <input type='password' \r\n                            className={objValueInput.isvalidVluePassword ? 'form-control' : 'is-invalid form-control'} \r\n                            placeholder='Password' \r\n                            value={password}\r\n                            onChange={(event) => {setpassword(event.target.value)}}\r\n                            onKeyPress ={(event)=> handlePressEnter(event)}\r\n                            />\r\n                            <button className='btn btn-primary' onClick={() => handleLogin()}>Login</button>\r\n                            <span className='text-center'>\r\n                                <a className='forgot-password' href='#'>\r\n                                    Fogot your password ?\r\n                                </a>\r\n                            </span>\r\n                            <hr />\r\n                            <div className='text-center'>\r\n                                <button className='btn btn-success' onClick={() => handleCreateNewAccount()}>\r\n                                     Create new account\r\n                                    </button>\r\n                            </div>\r\n\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Login;","E:\\DATN\\datn_WebQuanTri\\src\\component\\Register\\Register.js",["64","65","66"],"import { useEffect, useState } from 'react';\r\nimport './Register.scss';\r\nimport axios from 'axios';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toast } from 'react-toastify';\r\nimport { registerNewUser } from '../../services/userServices';\r\n\r\nconst Register = (props) => {\r\n    const [firtsname, setfirtsname] = useState('');\r\n    const [lastname, setlastname] = useState('');\r\n    const [email, setemail] = useState('');\r\n    const [phone, setphone] = useState('');\r\n    const [address, setaddress] = useState('');\r\n    const [password, setpassword] = useState('');\r\n    const [confirmPassword, setconfirmPassword] = useState('');\r\n    const defaultValidInput = {\r\n        isValidFirstname: true,\r\n        isValidLastname: true,\r\n        isValidEmail: true,\r\n        isValidPhone: true,\r\n        isValidAddress: true,\r\n        isValidPassword: true,\r\n        isValidConfirmPassword: true,\r\n    }\r\n    const [ObjcheckValid, setObjcheckValid] = useState(defaultValidInput);\r\n    \r\n    let history = useHistory();\r\n    const handleLogin = () => {\r\n        history.push('/login');\r\n    }\r\n    const handleRegister = async() => {\r\n        let check  = isValidInput();\r\n        if(check == true){\r\n        let response = await registerNewUser(firtsname,lastname,email,password,phone,address);\r\n          let serverData = response.data;\r\n          if(+serverData.EC==0){\r\n            toast.success(serverData.EM);\r\n            history.push('/login');\r\n          }else{\r\n            toast.error(serverData.EM)\r\n          }\r\n        }\r\n        \r\n    }\r\n    useEffect(() => {\r\n        // axios.get('http://localhost:8000/api/v1/test-api').then(data => {\r\n        //     console.log(\"data>>>>>>>>..\",data)\r\n           \r\n\r\n    }, []);\r\n    const isValidInput = () => {\r\n        setObjcheckValid(defaultValidInput)\r\n        if (!firtsname) {\r\n            toast.error(\"First Name cannot be blank !\");\r\n            setObjcheckValid({...defaultValidInput, isValidFirstname: false});\r\n            return false;\r\n        }\r\n        if (!lastname) {\r\n            toast.error(\"Last Name cannot be blank !\");\r\n            setObjcheckValid({...defaultValidInput, isValidLastname: false});\r\n            return false;\r\n        }\r\n        if (!email) {\r\n            toast.error(\"Email cannot be blank !\");\r\n            setObjcheckValid({...defaultValidInput, isValidEmail: false});\r\n            return false;\r\n        }\r\n        let regx = /\\S+@\\S+\\.\\S+/;\r\n        if(!regx.test(email)){\r\n            toast.error(\"Email enter valid addresss !\");\r\n            setObjcheckValid({...defaultValidInput, isValidEmail: false});\r\n            return false;\r\n        }\r\n        if (!phone) {\r\n            toast.error(\"PhoneNumber cannot be blank !\");\r\n            setObjcheckValid({...defaultValidInput, isValidPhone: false});\r\n            return false;\r\n        }\r\n        if (!address) {\r\n            toast.error(\"Address cannot be blank !\");\r\n            setObjcheckValid({...defaultValidInput, isValidAddress: false});\r\n            return false;\r\n        }\r\n        if (!password) {\r\n            toast.error(\"Password cannot be blank !\");\r\n            setObjcheckValid({...defaultValidInput, isValidPassword: false});\r\n            return false;\r\n        }\r\n        if (password !== confirmPassword) {\r\n            toast.error(\"Your Password is not same !\");\r\n            setObjcheckValid({...defaultValidInput, isValidConfirmPassword: false});\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    return (\r\n        <div className=\"login-container\">\r\n            <div className=\"container\">\r\n                <div className=\"row px-3 px-sm-0\">\r\n                    <div className=\"content-left col-12 d-none col-sm-7 d-sm-block \">\r\n                        <div className='brand'>\r\n                            Đăng Ký\r\n                        </div>\r\n                        <div className='detail'>\r\n                            Đăng Ký để trở thành những đàn em của Thế Nguyện cùng nhau kề vai sát cánh trong tương lai ........\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"content-right col-sm-5 col-12 d-flex flex-column gap-3 py-3\">\r\n                        <div className='brand d-sm-none'>\r\n                            Thế Nguyện\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <label>First Name :</label>\r\n                            <input className={ObjcheckValid.isValidFirstname ? 'form-control' : 'form-control is-invalid' } type='text'  placeholder='First Name'\r\n                                value={firtsname} onChange={(event) => setfirtsname(event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <label>Last Name :</label>\r\n                            <input type='text' className={ObjcheckValid.isValidLastname ? 'form-control' : 'form-control is-invalid' } placeholder='Last Name'\r\n                                value={lastname} onChange={(event) => setlastname(event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <label> Email :</label>\r\n                            <input type='email' className={ObjcheckValid.isValidEmail ? 'form-control' : 'form-control is-invalid' } placeholder='Email address'\r\n                                value={email} onChange={(event) => setemail(event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <label> PhoneNumber :</label>\r\n                            <input type='number' className={ObjcheckValid.isValidPhone ? 'form-control' : 'form-control is-invalid' } placeholder='PhoneNumber'\r\n                                value={phone} onChange={(event) => setphone(event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <label> Address :</label>\r\n                            <input type='text' className={ObjcheckValid.isValidAddress ? 'form-control' : 'form-control is-invalid' } placeholder='Address'\r\n                                value={address} onChange={(event) => setaddress(event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <label> Password :</label>\r\n                            <input type='password' className={ObjcheckValid.isValidPassword ? 'form-control' : 'form-control is-invalid' } placeholder='Password'\r\n                                value={password} onChange={(event) => setpassword(event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className='form-group'>\r\n                            <label> RePassword :</label>\r\n                            <input type='password' className={ObjcheckValid.isValidConfirmPassword ? 'form-control' : 'form-control is-invalid' } placeholder='RePassWord'\r\n                                value={confirmPassword} onChange={(event) => setconfirmPassword(event.target.value)}\r\n                            />\r\n                        </div>\r\n\r\n                        <button className='btn btn-primary' onClick={() => handleRegister()}>Register</button>\r\n                        <hr />\r\n                        <div className='text-center'>\r\n                            <button className='btn btn-success' onClick={() => handleLogin()}>\r\n                                Already've an account? Login\r\n                            </button>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Register;","E:\\DATN\\datn_WebQuanTri\\src\\services\\userServices.js",[],"E:\\DATN\\datn_WebQuanTri\\src\\component\\ManageUsers\\Users.js",["67","68","69","70"],"import { useEffect, useState } from \"react\";\r\nimport { fetchAllUser, deleteUser,addUser,updateUser } from \"../../services/userServices\";\r\nimport { toast } from 'react-toastify';\r\nimport Swal from 'sweetalert2';\r\nimport ReactPaginate from 'react-paginate';\r\nimport ModelUser from \"./ModelUser\";\r\n\r\nconst Users = (props) => {\r\n    const [listUser, setListUsers] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [currentLimit, setCurrentLimit] = useState(10);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [isShowModelUser, setisShowModelUser] = useState(false);\r\n\r\n    useEffect(() => {\r\n        fetchUsers();\r\n    }, [currentPage])\r\n\r\n    const fetchUsers = async () => {\r\n        let respone = await fetchAllUser(currentPage, currentLimit);\r\n        console.log(respone.data)\r\n        if (respone && respone.data && respone.data.EC === '0') {\r\n            setTotalPages(respone.data.DT.totalPages);\r\n            setListUsers(respone.data.DT.users);\r\n        }\r\n    }\r\n    const handlePageClick = async(event) => {\r\n        setCurrentPage(+event.selected +1 )\r\n        // await fetchUsers(+event.selected +1 );\r\n    };\r\n\r\n    const handleDeleteUser = async(user) => {\r\n       Swal.fire({\r\n        title: \"Are you sure?\",\r\n        text: \"Do you want delete user!\",\r\n        icon: \"warning\",\r\n        showCancelButton: true,\r\n        confirmButtonColor: \"#3085d6\",\r\n        cancelButtonColor: \"#d33\",\r\n        confirmButtonText: \"Yes, delete it!\"\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n             deleteUser(user);\r\n             fetchUsers();\r\n             toast.success(\"Delete success\");\r\n          Swal.fire({\r\n            title: \"Deleted!\",\r\n            text: \"Your file has been deleted.\",\r\n            icon: \"success\"\r\n          });\r\n        }\r\n         \r\n      });\r\n       \r\n    }\r\n\r\n    const onHideCloseModelUser = () =>{\r\n        setisShowModelUser(false);\r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            <div className=\"manage-users-container\">\r\n                <div className=\"users-header\">\r\n                    <div className=\"title\">\r\n                        <h3>Table Users</h3>\r\n                    </div>\r\n                    <div className=\"actions\">\r\n                        <button className=\"btn btn-success\">Refesh</button>\r\n                        <button className=\"btn btn-primary\" onClick={()=>setisShowModelUser(true)}>Add New User</button>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"user-body\">\r\n                    <table className=\"table table-bordered table-hover\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\">STT</th>\r\n                                <th scope=\"col\">First Name</th>\r\n                                <th scope=\"col\">Last Name</th>\r\n                                <th scope=\"col\">Email</th>\r\n                                <th scope=\"col\">Phone Number</th>\r\n                                <th scope=\"col\">AddRess</th>\r\n                                <th scope=\"col\">Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {listUser && listUser.length > 0 ?\r\n                                <>\r\n                                    {listUser.map((item, index) => {\r\n                                        return (\r\n                                            <tr key={`row-${index}`}>\r\n                                                <td>{index + 1}</td>\r\n                                                <td>{item.firstName}</td>\r\n                                                <td>{item.lastName}</td>\r\n                                                <td>{item.email}</td>\r\n                                                <td>{item.phoneNumber}</td>\r\n                                                <td>{item.address}</td>\r\n                                               \r\n                                                <td>\r\n                                                    <button className=\"btn btn-warning mx-3\">Edit</button>\r\n                                                    <button className=\"btn btn-danger mx-3\" onClick={() => handleDeleteUser(item)}>Delete</button>\r\n                                                </td>\r\n                                            </tr>\r\n                                        )\r\n\r\n                                    })}\r\n                                </>\r\n                                :\r\n                                <><tr><td>Nots found user</td></tr></>\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n\r\n                </div>\r\n                {totalPages > 0 &&\r\n                <div className=\"user-footer\">\r\n                    <ReactPaginate\r\n                        nextLabel=\"next >\"\r\n                        onPageChange={handlePageClick}\r\n                        pageRangeDisplayed={3}\r\n                        marginPagesDisplayed={2}\r\n                        pageCount={totalPages}\r\n                        previousLabel=\"< previous\"\r\n                        pageClassName=\"page-item\"\r\n                        pageLinkClassName=\"page-link\"\r\n                        previousClassName=\"page-item\"\r\n                        previousLinkClassName=\"page-link\"\r\n                        nextClassName=\"page-item\"\r\n                        nextLinkClassName=\"page-link\"\r\n                        breakLabel=\"...\"\r\n                        breakClassName=\"page-item\"\r\n                        breakLinkClassName=\"page-link\"\r\n                        containerClassName=\"pagination\"\r\n                        activeClassName=\"active\"\r\n                        renderOnZeroPageCount={null}\r\n                    />\r\n                </div>\r\n                }\r\n            </div>\r\n        </div>\r\n        <ModelUser\r\n        title = {\"Create New User\"}\r\n        onHide={onHideCloseModelUser}\r\n        show={isShowModelUser}\r\n        />\r\n        </>\r\n    )\r\n}\r\nexport default Users;","E:\\DATN\\datn_WebQuanTri\\src\\routes\\AppRoutes.js",[],"E:\\DATN\\datn_WebQuanTri\\src\\routes\\PrivateRoutes.js",["71"],"import { useEffect } from \"react\";\r\nimport {\r\n    Route\r\n  } from \"react-router-dom\";\r\n  import { useHistory } from \"react-router-dom\";\r\n\r\n   \r\nconst PrivateRoutes = (props) => {\r\n     let history = useHistory();\r\n    useEffect(() => {\r\n        let session = sessionStorage.getItem(\"account\");\r\n        if (!session) {\r\n            history.push(\"/login\")\r\n            window.location.reload();\r\n        }\r\n    },[]);\r\n\r\n    return(\r\n        <>\r\n        <Route path={props.path} component = {props.component}/>\r\n        </>\r\n    )\r\n\r\n}\r\nexport default PrivateRoutes;","E:\\DATN\\datn_WebQuanTri\\src\\component\\ManageUsers\\ModelUser.js",["72","73","74","75","76","77","78","79","80","81","82","83","84","85"],"import Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { useState, useEffect } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { addUser } from '../../services/userServices';\r\nimport _ from 'lodash';\r\nconst ModelUser = (props) => {\r\n    const [firstName, setfirstName] = useState(\"\");\r\n    const [lastName, setlastName] = useState(\"\");\r\n    const [email, setemail] = useState(\"\");\r\n    const [phoneNumber, setphoneNumber] = useState(\"\");\r\n    const [address, setaddress] = useState(\"\");\r\n    const [password, setpassword] = useState(\"\");\r\n\r\n    const defaultuserData = {\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        phoneNumber: '',\r\n        address: '',\r\n        password: ''\r\n    }\r\n    const validInputsDefault = {\r\n        firstName: true,\r\n        lastName: true,\r\n        email: true,\r\n        phoneNumber: true,\r\n        address: true,\r\n        password: true\r\n    }\r\n    const [userData, setUserData] = useState(defaultuserData);\r\n    const [validInputs, setValidInputs] = useState(validInputsDefault);\r\n    const handleOnchangeInput = (value, name) => {\r\n        let _userData = _.cloneDeep(userData);\r\n        _userData[name] = value;\r\n        setUserData(_userData);\r\n    }\r\n    const CheckvalidInputUser = () => {\r\n        setValidInputs(validInputsDefault);\r\n\r\n        let arr = ['email', 'phoneNumber', 'address', 'password'];\r\n        let check = true;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (!userData[arr[i]]) {\r\n                let _validInputs = _.cloneDeep(validInputsDefault);\r\n                _validInputs[arr[i]] = false;\r\n                setValidInputs(_validInputs);\r\n\r\n                toast.error(`Khong de trong ${arr[i]}`);\r\n                check = false;\r\n                break;\r\n            }\r\n        }\r\n        return check;\r\n    }\r\n    const handleConfirmUser = async () => {\r\n        let check = CheckvalidInputUser();\r\n        if (check == true) {\r\n            let res = await addUser({...userData});\r\n            if (res.data && res.data.EC === 0) {\r\n                props.onHide();\r\n                setUserData(defaultuserData);\r\n            } else {\r\n                toast.error(`Err create user`);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal size=\"lg\" show={props.show} className='model-user' onHide={props.onHide}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        <span>{props.title}</span>\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className='content-body row'>\r\n                        <div className='col-12 col-sm-6 form-group'>\r\n                            <label>First Name  :</label>\r\n                            <input className='form-control '\r\n                                type='text' value={userData.firstName}\r\n                                onChange={(event) => handleOnchangeInput(event.target.value, \"firstName\")}\r\n                            />\r\n                        </div>\r\n                        <div className='col-12 col-sm-6 form-group'>\r\n                            <label>Last Name :</label>\r\n                            <input className='form-control ' type='text' value={userData.lastName}\r\n                                onChange={(event) => handleOnchangeInput(event.target.value, \"lastName\")}\r\n                            />\r\n                        </div>\r\n                        <div className='col-12 col-sm-6 form-group'>\r\n                            <label> Email (<span className='red'>*</span>) :</label>\r\n                            <input className={validInputs.email ? 'form-control' : 'form-control is-invalid'}\r\n                                type='email' value={userData.email}\r\n                                onChange={(event) => handleOnchangeInput(event.target.value, \"email\")}\r\n                            />\r\n                        </div>\r\n                        <div className='col-12 col-sm-6 form-group'>\r\n                            <label>phoneNumber Number (<span className='red'>*</span>) :</label>\r\n                            <input className={validInputs.phoneNumber ? 'form-control' : 'form-control is-invalid'}\r\n                                type='number' value={userData.phoneNumber}\r\n                                onChange={(event) => handleOnchangeInput(event.target.value, \"phoneNumber\")}\r\n                            />\r\n                        </div>\r\n                        <div className='col-12 col-sm-6 form-group'>\r\n                            <label>AddRess (<span className='red'>*</span>) :</label>\r\n                            <input className={validInputs.address ? 'form-control' : 'form-control is-invalid'}\r\n                                type='text' value={userData.address}\r\n                                onChange={(event) => handleOnchangeInput(event.target.value, \"address\")}\r\n                            />\r\n                        </div>\r\n                        <div className='col-12 col-sm-6 form-group'>\r\n                            <label>Password (<span className='red'>*</span>) :</label>\r\n                            <input className={validInputs.password ? 'form-control' : 'form-control is-invalid'}\r\n                                type='password' value={userData.password}\r\n                                onChange={(event) => handleOnchangeInput(event.target.value, \"password\")}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={props.onHide}>Close</Button>\r\n                    <Button variant=\"primary\" onClick={() => handleConfirmUser()}>\r\n                        Save\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ModelUser;",{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":10,"column":10,"nodeType":"92","messageId":"93","endLine":10,"endColumn":17},{"ruleId":"94","severity":1,"message":"95","line":8,"column":31,"nodeType":"96","messageId":"97","endLine":8,"endColumn":33},{"ruleId":"98","severity":1,"message":"99","line":11,"column":7,"nodeType":"100","endLine":11,"endColumn":9,"suggestions":"101"},{"ruleId":"94","severity":1,"message":"95","line":16,"column":16,"nodeType":"96","messageId":"97","endLine":16,"endColumn":18},{"ruleId":"94","severity":1,"message":"95","line":54,"column":24,"nodeType":"96","messageId":"97","endLine":54,"endColumn":26},{"ruleId":"94","severity":1,"message":"95","line":54,"column":44,"nodeType":"96","messageId":"97","endLine":54,"endColumn":46},{"ruleId":"98","severity":1,"message":"102","line":65,"column":7,"nodeType":"100","endLine":65,"endColumn":9,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":98,"column":33,"nodeType":"106","endLine":98,"endColumn":73},{"ruleId":"90","severity":1,"message":"107","line":3,"column":8,"nodeType":"92","messageId":"93","endLine":3,"endColumn":13},{"ruleId":"94","severity":1,"message":"95","line":33,"column":18,"nodeType":"96","messageId":"97","endLine":33,"endColumn":20},{"ruleId":"94","severity":1,"message":"95","line":36,"column":28,"nodeType":"96","messageId":"97","endLine":36,"endColumn":30},{"ruleId":"90","severity":1,"message":"108","line":2,"column":35,"nodeType":"92","messageId":"93","endLine":2,"endColumn":42},{"ruleId":"90","severity":1,"message":"109","line":2,"column":43,"nodeType":"92","messageId":"93","endLine":2,"endColumn":53},{"ruleId":"90","severity":1,"message":"110","line":11,"column":26,"nodeType":"92","messageId":"93","endLine":11,"endColumn":41},{"ruleId":"98","severity":1,"message":"111","line":17,"column":8,"nodeType":"100","endLine":17,"endColumn":21,"suggestions":"112"},{"ruleId":"98","severity":1,"message":"102","line":16,"column":7,"nodeType":"100","endLine":16,"endColumn":9,"suggestions":"113"},{"ruleId":"90","severity":1,"message":"114","line":3,"column":20,"nodeType":"92","messageId":"93","endLine":3,"endColumn":29},{"ruleId":"90","severity":1,"message":"115","line":8,"column":12,"nodeType":"92","messageId":"93","endLine":8,"endColumn":21},{"ruleId":"90","severity":1,"message":"116","line":8,"column":23,"nodeType":"92","messageId":"93","endLine":8,"endColumn":35},{"ruleId":"90","severity":1,"message":"117","line":9,"column":12,"nodeType":"92","messageId":"93","endLine":9,"endColumn":20},{"ruleId":"90","severity":1,"message":"118","line":9,"column":22,"nodeType":"92","messageId":"93","endLine":9,"endColumn":33},{"ruleId":"90","severity":1,"message":"119","line":10,"column":12,"nodeType":"92","messageId":"93","endLine":10,"endColumn":17},{"ruleId":"90","severity":1,"message":"120","line":10,"column":19,"nodeType":"92","messageId":"93","endLine":10,"endColumn":27},{"ruleId":"90","severity":1,"message":"121","line":11,"column":12,"nodeType":"92","messageId":"93","endLine":11,"endColumn":23},{"ruleId":"90","severity":1,"message":"122","line":11,"column":25,"nodeType":"92","messageId":"93","endLine":11,"endColumn":39},{"ruleId":"90","severity":1,"message":"123","line":12,"column":12,"nodeType":"92","messageId":"93","endLine":12,"endColumn":19},{"ruleId":"90","severity":1,"message":"124","line":12,"column":21,"nodeType":"92","messageId":"93","endLine":12,"endColumn":31},{"ruleId":"90","severity":1,"message":"125","line":13,"column":12,"nodeType":"92","messageId":"93","endLine":13,"endColumn":20},{"ruleId":"90","severity":1,"message":"126","line":13,"column":22,"nodeType":"92","messageId":"93","endLine":13,"endColumn":33},{"ruleId":"94","severity":1,"message":"95","line":58,"column":19,"nodeType":"96","messageId":"97","endLine":58,"endColumn":21},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"no-unused-vars","'account' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'location.pathname'. Either include it or remove the dependency array.","ArrayExpression",["129"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["130"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'axios' is defined but never used.","'addUser' is defined but never used.","'updateUser' is defined but never used.","'setCurrentLimit' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array.",["131"],["132"],"'useEffect' is defined but never used.","'firstName' is assigned a value but never used.","'setfirstName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'setlastName' is assigned a value but never used.","'email' is assigned a value but never used.","'setemail' is assigned a value but never used.","'phoneNumber' is assigned a value but never used.","'setphoneNumber' is assigned a value but never used.","'address' is assigned a value but never used.","'setaddress' is assigned a value but never used.","'password' is assigned a value but never used.","'setpassword' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"135","fix":"139"},"Update the dependencies array to be: [location.pathname]",{"range":"140","text":"141"},"Update the dependencies array to be: [history]",{"range":"142","text":"143"},"Update the dependencies array to be: [currentPage, fetchUsers]",{"range":"144","text":"145"},{"range":"146","text":"143"},[358,360],"[location.pathname]",[2019,2021],"[history]",[669,682],"[currentPage, fetchUsers]",[412,414]]